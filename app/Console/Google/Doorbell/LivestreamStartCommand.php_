<?php

namespace App\Console\Google\Doorbell;

use App\Google\DataModels\Device;
use App\Google\LivestreamLoop;
use App\Google\Recorder;
use App\Models\Google;
use App\Models\LiveStream;
use Illuminate\Console\Command;
use Symfony\Component\Console\Output\OutputInterface;

class LivestreamStartCommand extends Command
{
    protected $signature = 'google:doorbell:start {name?}
                                                  {--r|record : Records the livestream to the configured file(s) }

                                                 ';

    protected $description = 'Initiates the livestream of the doorbell camera';

    public function handle()
    {
        $google  = Google::first();
        $service = $google->getGoogleService();
        /** @var Device $device */
        $devices = $service->getDevices()->where('type', Device::DOORBELL_TYPE);
        $device  = null;
        if ($this->argument('name')) {
            $device = $devices->firstWhere('roomName', $this->argument('name'));
        } else {
            $devicesByName = $devices->map->getRoomName()->toArray();
            $name          = $this->choice('Which doorbell?', $devicesByName);
            $device        = $devices->firstWhere('roomName', $name);
        }
        if ($device === null) {
            return $this->error("That device does not exist");
        }

        $service->doorbell->startLivestream($device, function (LiveStream $ls, LivestreamLoop $loop) {

            $this->info('Livestream started: ');
            $this->newLine();
            $this->line("streamExtensionToken: {$ls->extension_token}\nstreamToken: {$ls->token}");
            $this->newLine();
            $this->info($ls->getUrl());
            $this->newLine();
            $loop->onExtend(function(LiveStream $liveStream) use ($ls){
                $this->comment('ls is ls: ' . ($liveStream === $ls ? 'yes':'no') );
                $this->line("streamExtensionToken: {$ls->extension_token}\nstreamToken: {$ls->token}");
            });
            if($this->option('record')) {

                $recorder = new Recorder($loop);
                $loop->onStart(function () use ($recorder) {
                    $recorder->start();

                    $this->newLine(2);
                    $this->info('Recording livestream using FFMPEG..');
                    $this->comment('Command: ' . $recorder->getProcess()->getCommandLine(), OutputInterface::VERBOSITY_VERBOSE);
                });

                $loop->onStop(function () use ($recorder) {
                    $recorder->stop();
                });
            }

            $loop->onStart(fn () => $this->comment('Expires in:'));
            $loop->onTick(function(LiveStream $ls)  {
                $this->getOutput()->write($ls->getSecondsUntilExpires() . ', ');
            });
            $loop->onStop(fn () =>$this->info('Livestream stopped'));
        });
    }
}
